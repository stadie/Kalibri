--- OfficialLumiReweightingStandAlone.h	2012-04-27 14:22:11.000000000 +0200
+++ LumiReweightingStandAlone.h	2012-04-24 20:10:22.000000000 +0200
@@ -238,24 +238,40 @@
       GenHistName_      ( GenHistName ), 
       DataHistName_     ( DataHistName )
 	{
+	  std::cout << "is it working?" << std::endl;
 	  generatedFile_ = new TFile( generatedFileName_.c_str() ) ; //MC distribution
+	  std::cout << "is it working?" << std::endl;
 	  dataFile_      = new TFile( dataFileName_.c_str() );       //Data distribution
-
-	  Data_distr_ = new TH1(  *(static_cast<TH1*>(dataFile_->Get( DataHistName_.c_str() )->Clone() )) );
-	  MC_distr_ = new TH1(  *(static_cast<TH1*>(generatedFile_->Get( GenHistName_.c_str() )->Clone() )) );
-
+    if (generatedFile_->IsZombie()) {
+      std::cout << "Error opening file" << std::endl;
+       exit(-1);
+    }
+
+    if (dataFile_->IsZombie()) {
+       std::cout << "Error opening file" << std::endl;
+       exit(-1);
+    }
+    std::cout << generatedFileName_<<" " << dataFileName_<<" " << GenHistName_<<" " <<DataHistName_<<" " <<std::endl;
+	  std::cout << "is it working?" << std::endl;
+	  Data_distr_ = new TH1D(  *(static_cast<TH1D*>(dataFile_->Get( DataHistName_.c_str() )->Clone() )) );
+	  std::cout << "is it working?" << std::endl;
+	  MC_distr_ = new TH1D(  *(static_cast<TH1D*>(generatedFile_->Get( GenHistName_.c_str() )->Clone() )) );
+	  std::cout << "is it working?" << std::endl;
+	  std::cout << MC_distr_->GetNbinsX() <<std::endl;
 	  // normalize both histograms first                                                                            
 
 	  Data_distr_->Scale( 1.0/ Data_distr_->Integral() );
 	  MC_distr_->Scale( 1.0/ MC_distr_->Integral() );
 
-	  weights_ = new TH1( *(Data_distr_)) ;
+	  //	  weights_ = new TH1D( *(Data_distr_)) ;
+	  weights_ = (TH1D*) Data_distr_->Clone() ;
 
 	  // MC * data/MC = data, so the weights are data/MC:
 
 	  weights_->SetName("lumiWeights");
 
-	  TH1* den = new TH1(*(MC_distr_));
+	  //	  TH1D* den = new TH1D(*(MC_distr_));
+	  TH1D* den = (TH1D*)MC_distr_->Clone();
 
 	  weights_->Divide( den );  // so now the average weight should be 1.0
 
@@ -290,11 +306,10 @@
 
 	Int_t NBins = MC_distr.size();
 
-	MC_distr_ = new TH1F("MC_distr","MC dist",NBins,0.0, float(NBins));
-	Data_distr_ = new TH1F("Data_distr","Data dist",NBins,0.0, float(NBins));
-
-	weights_ = new TH1F("luminumer","luminumer",NBins,0.0, float(NBins));
-	TH1* den = new TH1F("lumidenom","lumidenom",NBins,0.0, float(NBins));
+	MC_distr_ = new TH1D("MC_distr","MC dist",NBins,0.0, float(NBins));
+	Data_distr_ = new TH1D("Data_distr","Data dist",NBins,0.0, float(NBins));
+	weights_ = new TH1D("luminumer","luminumer",NBins,0.0, float(NBins));
+	TH1* den = new TH1D("lumidenom","lumidenom",NBins,0.0, float(NBins));
 
 	for(int ibin = 1; ibin<NBins+1; ++ibin ) {
 	  weights_->SetBinContent(ibin, Lumi_distr[ibin-1]);
@@ -509,7 +525,7 @@
       void weight3D_set( std::string WeightFileName ) { 
 
 	TFile *infile = new TFile(WeightFileName.c_str());
-	TH1F *WHist = (TH1F*)infile->Get("WHist");
+	TH1D *WHist = (TH1D*)infile->Get("WHist");
 
 	// Check if the histogram exists           
 	if (!WHist) {
@@ -1396,7 +1412,7 @@
       std::string DataHistName_;
       TFile *generatedFile_;
       TFile *dataFile_;
-      TH1  *weights_;
+      TH1D  *weights_;
 
       //keep copies of normalized distributions:                                                                                  
       TH1*      MC_distr_;
